generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Companies {
  id          Int      @id @default(autoincrement())
  country     String   @db.NVarChar(Max)
  name        String   @db.NVarChar(Max)
  address     String   @db.NVarChar(Max)
  sector      String   @db.NVarChar(Max)
  website     String   @db.NVarChar(Max)
  email       String   @db.NVarChar(Max)
  phoneNumber String   @db.NVarChar(Max)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Resources {
  id                 Int                  @id @default(autoincrement())
  name               String               @db.NVarChar(Max)
  country            String               @db.NVarChar(Max)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  resourceLocations  ResourceLocations[]
  miningCompanies    MiningCompanies[]
  governmentAgencies GovernmentAgencies[]
  user               User?                @relation(fields: [userId], references: [id])
  userId             Int?
}

model ResourceLocations {
  id          Int       @id @default(autoincrement())
  location    String    @db.NVarChar(Max)
  resources   Resources @relation(fields: [resourcesId], references: [id], onDelete: Cascade)
  resourcesId Int
}

model MiningCompanies {
  id          Int       @id @default(autoincrement())
  company     String    @db.NVarChar(Max)
  resources   Resources @relation(fields: [resourcesId], references: [id], onDelete: Cascade)
  resourcesId Int
}

model GovernmentAgencies {
  id          Int       @id @default(autoincrement())
  agency      String    @db.NVarChar(Max)
  resources   Resources @relation(fields: [resourcesId], references: [id], onDelete: Cascade)
  resourcesId Int
}

// Define the User model
model User {
  id         Int         @id @default(autoincrement())
  firstName  String
  lastName   String
  username   String      @unique
  email      String      @unique
  password   Password    @relation(fields: [passwordId], references: [id])
  passwordId Int         @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  companies  Companies[]
  resources  Resources[]
}

// Define the Password model
model Password {
  id     Int    @id @default(autoincrement())
  hashed String
  user   User?
}
